<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
		<section name="proxyServices" type="ShareDeployed.Proxy.IoC.Config.ProxyServicesHandler, ShareDeployed.Proxy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
		<section name="proxyConfig" type="ShareDeployed.Proxy.Config.ProxyConfigHandler, ShareDeployed.Proxy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
	</configSections>

	<log4net debug="true">
		<appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
			<file value="Log\\Wpferror.log" />
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="10" />
			<maximumFileSize value="10MB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%-5p %d %5rms %-22.22c{1} %-18.18M - %m%n" />
			</layout>
		</appender>
		<root>
			<level value="DEBUG" />
			<appender-ref ref="RollingLogFileAppender" />
		</root>
	</log4net>

	<proxyServices omitExisting="true">
		<services>
			<service scope="1" alias="logAggregator" type="ShareDeployed.Proxy.Logging.LogAggregator, ShareDeployed.Proxy" contract="ShareDeployed.Proxy.Logging.ILogAggregator, ShareDeployed.Proxy" />
			<service alias="exceptionalInterceptor" type="ShareDeployed.Proxy.ExceptionInterceptor,ShareDeployed.Proxy">
				<properties>
					<property name="LogAggregator" alias="logAggregator" defaultIfMissed="true"/>
				</properties>
			</service>
			<service alias="beforeInvokeInterceptor" type="ShareDeployed.Proxy.BeforeMethodExecutesInterceptor,ShareDeployed.Proxy">
				<properties>
					<property name="LogAggregator" alias="logAggregator" defaultIfMissed="true"/>
				</properties>
			</service>
			<service alias="afterInvokeInterceptor" type="ShareDeployed.Proxy.AfterMethodExecutedInterceptor,ShareDeployed.Proxy">
				<properties>
					<property name="LogAggregator" alias="logAggregator" defaultIfMissed="true"/>
				</properties>
			</service>
			<service scope="0" alias="customerService" contract="ShareDeployed.Proxy.WpfTest.ICustomerService,ShareDeployed.Proxy.WpfTest"
					type="ShareDeployed.Proxy.WpfTest.CustomerService,ShareDeployed.Proxy.WpfTest"/>
		</services>
	</proxyServices>

	<proxyConfig omitExisting="true">
		<proxies>
			<proxy id="customersProxy" targetType="ShareDeployed.Proxy.WpfTest.CustomerService, ShareDeployed.Proxy.WpfTest"
				   proxyType="ShareDeployed.Proxy.DynamicProxy, ShareDeployed.Proxy" isWeak="false"/>
		</proxies>
	</proxyConfig>

	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
	</startup>
</configuration>